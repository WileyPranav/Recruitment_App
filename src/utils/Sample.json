[
    {
    "id": 1,
    "text": "Which of the following correctly defines a function in Python?",
    "options": [
        "A) function myFunction() { return 5; }",
        "B) def myFunction(): return 5",
        "C) myFunction: function() => 5",
        "D) void myFunction() { return 5; }"
    ],
    "correctAnswer": "B",
    "difficulty": "easy",
    "bloomsCategory": "Remember"
},
{
    "id": 2,
    "text": "What will be the output of the following code?\n\n```python\nprint(type([]))\n```",
    "options": [
        "A) <class 'list'>",
        "B) <class 'tuple'>",
        "C) <class 'dict'>",
        "D) <class 'set'>"
    ],
    "correctAnswer": "A",
    "difficulty": "easy",
    "bloomsCategory": "Remember"
},
{
    "id": 3,
    "text": "In a Python dictionary, which of the following is a correct statement about keys?",
    "options": [
        "A) Keys must be mutable types.",
        "B) Keys can only be integers.",
        "C) Keys must be unique and immutable.",
        "D) Keys can be duplicated."
    ],
    "correctAnswer": "C",
    "difficulty": "easy",
    "bloomsCategory": "Understand"
},
{
    "id": 4,
    "text": "What is the correct way to create a list in Python that contains the numbers 1 through 5?",
    "options": [
        "A) list(1, 2, 3, 4, 5)",
        "B) [1, 2, 3, 4, 5]",
        "C) (1, 2, 3, 4, 5)",
        "D) {1, 2, 3, 4, 5}"
    ],
    "correctAnswer": "B",
    "difficulty": "easy",
    "bloomsCategory": "Understand"
},
{
    "id": 5,
    "text": "Given the following code, what will be the output?\n\n```python\nx = 10\nif x > 5:\n    print('Greater')\nelse:\n    print('Smaller')\n```",
    "options": [
        "A) 'Smaller'",
        "B) 'Greater'",
        "C) None",
        "D) Error"
    ],
    "correctAnswer": "B",
    "difficulty": "easy",
    "bloomsCategory": "Apply"
},
{
    "id": 6,
    "text": "You want to iterate over a list of numbers and create a new list containing their squares. Which of the following pieces of code accomplishes this?",
    "options": [
        "A) squares = [x**2 for x in numbers]",
        "B) squares = map(x**2, numbers)",
        "C) squares = [x^2 for x in numbers]",
        "D) squares = [square(x) for x in numbers]"
    ],
    "correctAnswer": "A",
    "difficulty": "medium",
    "bloomsCategory": "Apply"
},
{
    "id": 7,
    "text": "You have a list of names, and you want to sort them alphabetically. Which of the following methods will accomplish this?",
    "options": [
        "A) names.sort()",
        "B) sorted(names)",
        "C) names.order()",
        "D) list.sort(names)"
    ],
    "correctAnswer": "A",
    "difficulty": "medium",
    "bloomsCategory": "Apply"
},
{
    "id": 8,
    "text": "In the below code snippet, what will be the value of 'result'?\n\n```python\ndef add(x, y):\n    return x + y\nresult = add(5, 10)\n```",
    "options": [
        "A) 5",
        "B) 10",
        "C) 15",
        "D) None"
    ],
    "correctAnswer": "C",
    "difficulty": "medium",
    "bloomsCategory": "Apply"
},
{
    "id": 9,
    "text": "You want to read a file and print each line. Which of the following snippets will work correctly?",
    "options": [
        "A) with open('file.txt', 'r') as file: print(file.read())",
        "B) with open('file.txt', 'r') as file: for line in file: print(line)",
        "C) open('file.txt', 'r') as file: print(file.readline())",
        "D) file = open('file.txt', 'r'); print(file.read())"
    ],
    "correctAnswer": "B",
    "difficulty": "medium",
    "bloomsCategory": "Apply"
},
{
    "id": 10,
    "text": "Given a list of integers, which of the following functions will return the sum of all the even numbers?",
    "options": [
        "A) sum([x for x in numbers if x % 2 != 0])",
        "B) sum(filter(lambda x: x % 2 == 0, numbers))",
        "C) sum(numbers) where x % 2 == 0",
        "D) total(numbers) where is_even(x)"
    ],
    "correctAnswer": "B",
    "difficulty": "medium",
    "bloomsCategory": "Apply"
},
{
    "id": 11,
    "text": "You need to find the index of an item in a list. Which of the following codes achieves this functionality correctly?",
    "options": [
        "A) index = list.index(item)",
        "B) index = myList.index(item)",
        "C) index = getIndex(myList, item)",
        "D) myList.find(item)"
    ],
    "correctAnswer": "B",
    "difficulty": "medium",
    "bloomsCategory": "Analyze"
},
{
    "id": 12,
    "text": "Which of the following code snippets will correctly filter out all the vowels from a string?",
    "options": [
        "A) ''.join([c for c in text if c not in 'aeiou'])",
        "B) filter(lambda c: c not in 'aeiou', text)",
        "C) text.filter(c: c not in 'aeiou')",
        "D) text.remove('aeiou')"
    ],
    "correctAnswer": "A",
    "difficulty": "medium",
    "bloomsCategory": "Analyze"
},
{
    "id": 13,
    "text": "When given a nested list, what will be the output of this function?\n\n```python\nnested = [[1, 2], [3, 4]]\nresult = [num for sublist in nested for num in sublist]\nprint(result)\n```",
    "options": [
        "A) [1, 2, 3, 4]",
        "B) [[1, 2], [3, 4]]",
        "C) [1, 3, 2, 4]",
        "D) [1, 2, 4]"
    ],
    "correctAnswer": "A",
    "difficulty": "medium",
    "bloomsCategory": "Analyze"
},
{
    "id": 14,
    "text": "You have a list of numbers and want to find the maximum using a function. Which of the following options is correct?",
    "options": [
        "A) max(numbers)",
        "B) maximum(numbers)",
        "C) numbers.max()",
        "D) findMax(numbers)"
    ],
    "correctAnswer": "A",
    "difficulty": "medium",
    "bloomsCategory": "Analyze"
},
{
    "id": 15,
    "text": "If you have a module named `math` that you want to import, which is the correct syntax?",
    "options": [
        "A) import math",
        "B) from math import *",
        "C) include math",
        "D) using math"
    ],
    "correctAnswer": "A",
    "difficulty": "medium",
    "bloomsCategory": "Analyze"
},
{
    "id": 16,
    "text": "Given a string 'Hello World', what will be the output of the following code?\n\n```python\nprint(string.replace('World', 'Python'))\n```",
    "options": [
        "A) Hello Python",
        "B) Hello Python",
        "C) Error",
        "D) Hello World"
    ],
    "correctAnswer": "A",
    "difficulty": "medium",
    "bloomsCategory": "Evaluate"
},
{
    "id": 17,
    "text": "You need to compare two lists and determine if they contain the same elements in any order. Which method would you use?",
    "options": [
        "A) list1 == list2",
        "B) sorted(list1) == sorted(list2)",
        "C) set(list1) == set(list2)",
        "D) all(item in list1 for item in list2)"
    ],
    "correctAnswer": "B",
    "difficulty": "hard",
    "bloomsCategory": "Evaluate"
},
{
    "id": 18,
    "text": "In the provided code, which line will raise an exception?\n\n```python\ntry:\n    x = 10/0\nexcept ZeroDivisionError:\n    print(\"Division by zero\")\nfinally:\n    print(\"Always runs\")\n```",
    "options": [
        "A) Line 1",
        "B) Line 2",
        "C) Line 3",
        "D) No exception will occur"
    ],
    "correctAnswer": "A",
    "difficulty": "hard",
    "bloomsCategory": "Evaluate"
},
{
    "id": 19,
    "text": "Which of the following code snippets utilizes exception handling correctly?",
    "options": [
        "A) try: print(x) except: print('Error')",
        "B) catch: print('Error')",
        "C) try: print(1/0) finally: print('end')",
        "D) except: print('Error')"
    ],
    "correctAnswer": "A",
    "difficulty": "hard",
    "bloomsCategory": "Evaluate"
},
{
    "id": 20,
    "text": "Given this list comprehension, what will be its output with input [1, 2, 3, 4]?\n\n```python\nresult = [x for x in numbers if x % 2 == 0]\n```",
    "options": [
        "A) [2, 4]",
        "B) [1, 3]",
        "C) [1, 2, 3, 4]",
        "D) []"
    ],
    "correctAnswer": "A",
    "difficulty": "hard",
    "bloomsCategory": "Analyze"
},
{
    "id": 21,
    "text": "What will be the result of the following code?\n\n```python\n[1, 2, 3, 4] + [5, 6]\n```",
    "options": [
        "A) [1, 2, 3, 4, 5, 6]",
        "B) [1, 2, 3, 4] + [5, 6]",
        "C) [5, 6, 1, 2, 3, 4]",
        "D) [1, 2, 3, 4] + 5"
    ],
    "correctAnswer": "A",
    "difficulty": "medium",
    "bloomsCategory": "Apply"
},
{
    "id": 22,
    "text": "What will be the output of the following code snippet?\n\n```python\nx = [1, 2]\ny = x\ny.append(3)\nprint(x)\n```",
    "options": [
        "A) [1, 2]",
        "B) [1, 2, 3]",
        "C) [3, 1, 2]",
        "D) Error"
    ],
    "correctAnswer": "B",
    "difficulty": "hard",
    "bloomsCategory": "Analyze"
},
{
    "id": 23,
    "text": "Given the following code segment, which best describes the output?\n\n```python\nclass Dog:\n    def bark(self):\n        return 'Woof!'\nmy_dog = Dog()\nprint(my_dog.bark())\n```",
    "options": [
        "A) 'Woof!'",
        "B) 'Dog bark'",
        "C) 'My Dog'",
        "D) Error"
    ],
    "correctAnswer": "A",
    "difficulty": "hard",
    "bloomsCategory": "Understand"
},
{
    "id": 24,
    "text": "Using functional programming principles, which snippet correctly returns a list of even numbers from the input list?",
    "options": [
        "A) filter(lambda x: x % 2 == 0, numbers)",
        "B) [x if x % 2 == 0 for x in numbers]",
        "C) map(lambda: x: x % 2 == 0, numbers)",
        "D) [x for x in numbers if is_even(x)]"
    ],
    "correctAnswer": "A",
    "difficulty": "hard",
    "bloomsCategory": "Create"
},
{
    "id": 25,
    "text": "What will the following code snippet output?\n\n```python\nnums = [1, 2, 3]\nprint(''.join([str(x) for x in nums]))\n```",
    "options": [
        "A) [1, 2, 3]",
        "B) '123'",
        "C) '1, 2, 3'",
        "D) Error"
    ],
    "correctAnswer": "B",
    "difficulty": "medium",
    "bloomsCategory": "Apply"
},
{
    "id": 26,
    "text": "You need a function that returns the factorial of a given number using recursion. Which of the following snippets is correct?",
    "options": [
        "A) def factorial(n): return n * factorial(n-1) if n > 1 else 1",
        "B) def factorial(n): return factorial(n-1) * n if n > 0 else 1",
        "C) def factorial(n): return n! if n > 0 else 1",
        "D) def factorial(n): return n * factorial(n+1) if n < 1 else 1"
    ],
    "correctAnswer": "A",
    "difficulty": "hard",
    "bloomsCategory": "Create"
},
{
    "id": 27,
    "text": "If you wanted to create a class that represents a person with a name and age, which of the following code snippets would be most appropriate?",
    "options": [
        "A) class Person:\n       def __init__(self, name, age): self.name = name; self.age = age",
        "B) class Person:\n       def create(self, name, age): self.name = name; self.age = age",
        "C) def Person(name, age): return {'name': name, 'age': age}",
        "D) class Person:\n       pass"
    ],
    "correctAnswer": "A",
    "difficulty": "hard",
    "bloomsCategory": "Create"
},
{
    "id": 28,
    "text": "Which of the following code snippets correctly creates a set from a list to remove duplicates?",
    "options": [
        "A) unique = set(myList)",
        "B) unique = list(set(myList))",
        "C) unique = myList.to_set()",
        "D) unique = remove_duplicates(myList)"
    ],
    "correctAnswer": "B",
    "difficulty": "hard",
    "bloomsCategory": "Create"
},
{
    "id": 29,
    "text": "How would you create a function that takes a variable number of arguments?",
    "options": [
        "A) def func(args):",
        "B) def func(*args):",
        "C) def func(args*):",
        "D) def func():"
    ],
    "correctAnswer": "B",
    "difficulty": "hard",
    "bloomsCategory": "Create"
},
{
    "id": 30,
    "text": "How can you implement a generator in Python to yield even numbers up to a given limit?",
    "options": [
        "A) def even_generator(limit):\n       return (x for x in range(limit) if x % 2 == 0)",
        "B) def even_generator(limit):\n       yield (x for x in range(limit) if x % 2 == 0)",
        "C) def even_generator(limit):\n       for x in range(limit):\n           if x % 2 == 0:\n               yield x",
        "D) def even_generator(limit):\n       return [x for x in range(limit) if x % 2 == 0]"
    ],
    "correctAnswer": "C",
    "difficulty": "hard",
    "bloomsCategory": "Create"
}
]